h1. zem_contact_reborn

*Requires Textpattern 4.5.0+*

A Textpattern CMS form mailer plugin. @<txp:zem_contact />@ produces a flexible, customisable email contact form. It is intended for use as an enquiry form for commercial and private sites, and includes several features to help reduce common problems with such forms (invalid email addresses, missing information).

Please report bugs and problems with this plugin at "the GitHub project's issues page":https://github.com/Bloke/zem_contact_reborn/issues.

h2. Features

* Arbitrary HTML5 text fields can be specified, with min/max/required settings for validation.
* Email address validation, including a check for a valid MX record (Unix only).
* Safe escaping of input data.
* UTF-8 safe.
* Accessible form layout, including @<label>@, @<legend>@ and @<fieldset>@ tags.
* Various classes and ids to allow easy styling of all parts of the form.
* Spam prevention API (used by Tranquillo's @pap_contact_cleaner@ plugin) and delivery API.

h2. Installation, upgrading and uninstallation

Download the latest version of the plugin from "the GitHub project page":https://github.com/Bloke/zem_contact_reborn/releases, paste the code into the Textpattern Admin → Plugins panel, install and enable the plugin. Visit the "forum thread":http://forum.textpattern.com/viewtopic.php?id=23728 for more info or to report on the success or otherwise of the plugin.

Note that the language strings are part of the plugin itself, so if you are upgrading from v4.0.3.20 or earlier, disable or remove the zem_contact_lang plugin. If you have a translation Textpack available that is not yet incorporated, please submit it for inclusion.

To uninstall, delete from the Admin → Plugins panel.

h2. Usage

h3. Contact form

The simplest form is shown below, which produces a default form with 'Name', 'Email' and 'Message' fields. Email will be delivered to <code>recipient@example.com</code>, with the user's supplied email as the @From:@ address.

bc. <txp:zem_contact to="recipient@example.com" />

To specify fields explicitly, use something like this:

bc. <txp:zem_contact to="recipient@example.com">
    <txp:zem_contact_email />
    <txp:zem_contact_text label="Phone" min="7" max="15" />
    <txp:zem_contact_textarea label="Your question" />
    <txp:zem_contact_submit label="Send" />
</txp:zem_contact>

Alternatively, place the field specifications in a Textpattern form, and call it like this:

bc. <txp:zem_contact to="recipient@example.com" form="my-contact-form" />

h3. Send article

Within the context of an individual article, this plugin can be used to send the article (or excerpt, if it exists) to an email address specified by the visitor. This requires at least two tags:

# @zem_contact@, to create form that is initially hidden by setting the @send_article@ attribute.
# @zem_contact_send_article@, to create a 'Send article' link which reveals the aforementioned form when clicked.

bc. <txp:zem_contact send_article="1" />
<txp:zem_contact_send_article />

By default the form contains fields for your name and email address, the recipient's email address and a personal message, but similar to contact forms you can create your own form layout. Some things you need to know:

# Set the @send_article@ attribute to @1@ in the @zem_contact@ tag.
# Use a @zem_contact_email@ tag with the @send_article@ attribute set to @1@. This field will be used as the recipient email address.

bc.. <txp:zem_contact to="you@example.com" send_article="1">
    <txp:zem_contact_email label="Recipient Email" send_article="1" />
    <txp:zem_contact_email label="Your Email" />
    <txp:zem_contact_submit label="Send Article" />
</txp:zem_contact>

<txp:zem_contact_send_article />

h2. Tags

@<txp:zem_contact_send_article />@ can be used to create a 'Send article' link within an article form, connecting it to the contact form.

All other tags provided by this plugin can only be used inside a @<txp:zem_contact>@ - @</txp:zem_contact>@ container tag or in a Textpattern form used as the @form@ attribute in the @<txp:zem_contact />@ tag.

In addition to the tags detailed in the following sections, every tag accepts a core set of common attributes. These are:

* @accesskey="character"@: shortcut key to set focus on the field.
* @autofocus="boolean"@: to automatically focus the cursor in this field on page load. Only one field may have this property.
* @dir="value"@: text direction (@ltr@, @rtl@ or @auto@).
* @disabled="boolean"@: whether the input control accepts user input. If set, the element does not get submitted with the form, nor is it subject to any @checkValidity()@ JavaScript calls.
* @hidden="boolean"@: the visibility of the input control.
* @id="id"@: the HTML identifier for the control.
* @lang="value"@: the ISO 639 language short code (e.g. @en-gb@, @de-de@) that govern the field.
* @list="id"@: used in conjunction with the @<datalist>@ tag to specify a set of options. The id is the reference to the datalist to use.
* @readonly="boolean"@: control does not accept user input, but will be processed on form submission and can be validated.
* @spellcheck="value"@: whether the field is subject to spell checking (@true@ = yes, @default@ = browser decides, or @false@ = no).
* @style="style rules"@: inline CSS @style@ rules to apply to the input control.
* @tabindex="number"@: the order in which the cursor jumps between elements when using the tab key.
* @title="value"@: usually used for hover tooltip describing the input control's use in your application.
* @translate="boolean"@: whether to subject the attribute content to language translation.

h3. zem_contact

bc. <txp:zem_contact />

May be used as a single (self-closing) or container tag. Place this where you want the input form to go. Status and error messages, if any, will be displayed before the form.

h4. Attributes

* @body_form="form name"@<br />Use specified form for the message body text.
* @class="space-separated values"@<br /> Set the CSS @class@ name of the tag. Default: @zemContactForm@. To remove @class@ attribute from the element entirely, use @class=""@.
* @copysender="boolean"@<br />Whether to send a copy of the email to the sender's address. Available values: @1@ (yes) or @0@ (no). Default is @0@.
* @expire="number"@<br />Number of seconds after which the form will expire, thus requiring a page refresh before sending. Default is @600@.
* @form="form name"@<br />Use specified form, containing the layout of the contact form fields.
* @from="email address"@<br />Email address used in the "From:" field when sending email. Defaults to the sender's email address. If specified, the sender's email address will be placed in the "Reply-To:" field instead.
* @from_form="form name"@<br />Use specified form (overrides @from@ attribute).
* @label="text"@<br />Label for the contact form. If set to an empty string, display of the fieldset and legend tags will be suppressed. Default is @Contact@.
* @redirect="URL"@<br />Redirect to specified URL (overrides @thanks@ and @thanks_form@ attributes). URL must be relative to the Textpattern site URL. Example: @redirect="monkey"@ would redirect to @http://example.com/monkey@.
* @required="boolean"@<br /> Whether to require all tags in this contact form to be completed before the form can be submitted. Can be overridden on a field-by-field basis by using the @required@ attribute in the relevant tag. Available values: @1@ (yes) or @0@ (no). Default is @1@.
* @send_article="boolean"@<br />Whether to use this form to send an article. Available values: @1@ (yes) or @0@ (no). Default is @0@.
* @show_error="boolean"@<br /> Whether to display error and status messages. Available values: @1@ (yes) or @0@ (no). Default is @1@.
* @show_input="boolean"@<br /> Whether to display the form @<input>@ fields. Available values: @1@ (yes) or @0@ (no). Default is @1@.
* @subject="subject text"@<br />Subject used when sending an email. Default is the site name.
* @subject_form="form name"@<br />Use specified form (overrides @subject@ attribute).
* @thanks="text"@<br />Message shown after successfully submitting a message. Default is @Thank you, your message has been sent@.
* @thanks_form="form name"@<br />Use specified form (overrides @thanks@ attribute).
* @to="email address"@ *(required)*<br />Recipient email address. Multiple recipients can be specified, separated by commas.
* @to_form="form name"@<br />Use specified form (overrides @to@ attribute).

h4. Examples

h5. Example 1

When used as a single tag, produces a default form with 'Name', 'Email' and 'Message' fields. Email will be delivered to <code>recipient@example.com</code>, with the user's supplied email as the @From:@ address:

bc. <txp:zem_contact to="recipient@example.com" />

h5. Example 2

When used as a container tag, much more flexibility is allowed, for example:

bc. <txp:zem_contact to="recipient@example.com">
    <txp:zem_contact_email />
    <txp:zem_contact_text label="Phone" min="7" max="15" />
    <txp:zem_contact_textarea label="Your question" />
    <txp:zem_contact_submit label="Send" />
</txp:zem_contact>

h5. Example 3

Example with custom email message formatting, called via the @body_form@ attribute:

bc. <txp:zem_contact to="recipient@example.com" body_form="message-formatting" />

And the @body_form@ form template named @message-formatting@ is as follows:

bc.. ============
Email received.

<txp:zem_contact_if name="email"><txp:zem_contact_label name="email" />: <txp:zem_contact_value name="email" /><txp:else />Mr. Nobody</txp:zem_contact_if> wrote:

<txp:zem_contact_if name="message"><txp:zem_contact_value name="message" /><txp:else />Nothing much :(</txp:zem_contact_if>

============

h3. zem_contact_text

bc. <txp:zem_contact_text />

Creates a text @<input>@ field. The input value will be included in the email, preceded by the label.

h4. Attributes

* @autocomplete="value"@<br />Indicates whether the value of the control can be automatically completed by the browser. This attribute is ignored if the value of the type attribute is @password@. Possible values are: @off@ (the browser does not automatically complete the entry) or @on@ (the browser can automatically complete the value based on values that the user has entered during previous uses). Default is unset.
* @break="tag"@<br />Break tag between the @<label>@ and @<input>@ field. Default is @<br />@. Use @break=""@ to put the label and input field on the same line.
* @class="space-separated values"@<br /> Set the CSS @class@ name of the tag. Default: @zemText@. To remove @class@ attribute from the element entirely, use @class=""@.
* @default="value"@<br />Default value when no input is provided.
* @html_form="id"@<br />The HTML @id@ of the @<form>@ tag to which the field is attached. Associated with the contained form by default.
* @inputmode="value"@<br />A hint to the browser for which keyboard to display. This attribute applies when the value of the type attribute is @text@, @password@ or @url@. Possible values are:
** @verbatim@: Alphanumeric, non-prose content such as usernames and passwords.
** @latin@: Latin-script input in the user's preferred language with typing aids such as text prediction enabled. For human-to-computer communication such as search boxes.
** @latin-name@: As latin, but for human names.
** @latin-prose@: As latin, but with more aggressive typing aids. For human-to-human communication such as instant messaging for email.
** @full-width-latin@: As latin-prose, but for the user's secondary languages.
** @kana@: Kana or romaji input, typically hiragana input, using full-width characters, with support for converting to kanji. Intended for Japanese text input.
** @katakana@: Katakana input, using full-width characters, with support for converting to kanji. Intended for Japanese text input.
** @numeric@: Numeric input, including keys for the digits 0 to 9, the user's preferred thousands separator character, and the character for indicating negative numbers. Intended for numeric codes, e.g. credit card numbers. For actual numbers, prefer using @type="number"@.
** @tel@: Telephone input, including asterisk and pound key. Use @type="tel"@ if possible instead.
** @email@: Email input. Use @<txp:zem_contact_email />@ if possible instead.
** @url@: URL input. Use @type="url"@ if possible instead.
* @label="text"@<br />Text label displayed to the user. Default is @Text@.
* @max=value"@<br />For character-based inputs, the maximum input value length in characters, using the HTML5 @maxlength@ attribute. To remove @maxlength@ attribute from the element entirely (not recommended), use @max=""@. For numeric-based inputs, the maximum input value the field accepts, using the HTML5 @max@ attribute (can be a negative value). Default is @100@. To remove @max@ attribute from the numerical input element entirely, use @max=""@.
* @min="value"@<br />For character-based inputs, the minimum input value length in characters, using the HTML5 @minlength@ attribute. Default is unset, i.e., no minimum limit. For numeric-based inputs, the minimum input value the field accepts, using the HTML5 @min@ attribute (can be a negative value). Default is @0@. To remove @min@ attribute from the numerical input element entirely, use @min=""@.
* @name="value"@<br />Field name, as used in the HTML @<input>@ tag.
* @pattern="regex"@<br />Regular expression that governs the format in which the field data is expected. Only used for character-based inputs.
* @placeholder="text"@<br />Text to show as a guide, when the @<input>@ field is empty.
* @required="boolean"@<br />Whether this field must be filled out. Available values: @1@ (yes) or @0@ (no). Default is whatever is set in the @<txp:zem_contact>@ tag's @required@ attribute - if neither attribute is set then default is @1@.
* @size="value"@<br/>The size, in characters, of the @<input>@ field.
* @step="value"@<br />For numeric-based inputs, the interval between min and max.
* @type="value"@<br />Type of text input. Default is @text@. Choose from:
** @color@
** @date@
** @datetime@
** @datetime-local@
** @month@
** @number@
** @password@
** @range@
** @search@
** @tel@
** @text@
** @time@
** @url@
** @week@

h4. Examples

h5. Example 1

bc. <txp:zem_contact_text label="Your name" />

h5. Example 2

bc. <txp:zem_contact_text type="range" label="UK shoe size" min="1" max="15" />

h5. Example 3

Create a telephone field with a validation "pattern for UK telephone number":http://html5pattern.com/Phones format:

bc. <txp:zem_contact_text type="tel" label="Telephone" pattern="^\s*\(?(020[7,8]{1}\)?[ ]?[1-9]{1}[0-9{2}[ ]?[0-9]{4})|(0[1-8]{1}[0-9]{3}\)?[ ]?[1-9]{1}[0-9]{2}[ ]?[0-9]{3})\s*$" required="1" />

h3. zem_contact_email

bc. <txp:zem_contact_email />

@<input>@ field for user's email address.

The entered email address will automatically be validated to make sure it is of the form "abc@xxx.yyy[.zzz]". On non-Windows servers, a test will be done to verify that an A or MX record exists for the domain. Neither test prevents spam, but it does help detect accidental typing errors.

h4. Attributes

* @autocomplete="value"@<br />Indicates whether the value of the control can be automatically completed by the browser. Possible values are: @off@ (the browser does not automatically complete the entry) or @on@ (the browser can automatically complete the value based on values that the user has entered during previous uses). Default is unset.
* @break="tag"@<br />Break tag between the @<label>@ and @<input>@ field. Default is @<br />@. Use @break=""@ to put the label and input field on the same line.
* @class="space-separated values"@<br /> Set the CSS @class@ name of the tag. Default: @zemEmail@. To remove @class@ attribute from the element entirely, use @class=""@.
* @default="value"@<br />Default value when no input is provided.
* @html_form="id"@<br />The HTML @id@ of the @<form>@ tag to which the field is attached. Associated with the contained form by default.
* @label="text"@<br />Text label displayed to the user. Default is @Email@.
* @max="integer"@<br />Maximum input value length in characters, using the HTML5 @maxlength@ attribute. Default is @100@. To remove @maxlength@ attribute from the element entirely (not recommended), use @max=""@.
* @min="integer"@<br />Minimum input value length in characters, using the HTML5 @minlength@ attribute. Default is unset, i.e., no minimum limit.
* @name="value"@<br />Field name, as used in the HTML @<input>@ tag.
* @placeholder="text"@<br />Text to show as a guide, when the @<input>@ field is empty.
* @required="boolean"@<br />Whether this field must be filled out. Available values: @1@ (yes) or @0@ (no). Default is whatever is set in the @<txp:zem_contact>@ tag's @required@ attribute - if neither attribute is set then default is @1@.
* @send_article="boolean"@<br />Whether this field is used as the recipient email address when using the send_article function. Available values: @1@ (yes) or @0@ (no). Default is @0@.
* @size="value"@<br/>The size, in characters, of the @<input>@ field.

h4. Examples

h5. Example 1

bc. <txp:zem_contact_email label="Your email address" />

h3. zem_contact_textarea

bc. <txp:zem_contact_textarea />

Creates a @<textarea>@.

h4. Attributes

* @autocomplete="value"@<br />Indicates whether the value of the control can be automatically completed by the browser. Possible values are: @off@ (the browser does not automatically complete the entry) or @on@ (the browser can automatically complete the value based on values that the user has entered during previous uses). Default is unset.
* @break="tag"@<br />Break tag between the @<label>@ and @<textarea>@. Default is @<br />@. Use @break=""@ to put the @<label>@ and @<input>@ field on the same line.
* @class="space-separated values"@<br /> Set the CSS @class@ name of the  @<textarea>@. Default: @zemTextarea@. To remove @class@ attribute from the element entirely, use @class=""@.
* @cols="integer"@<br/>Number of columns, in characters, of the @<textarea>@. Default is @58@.
* @default="value"@<br />Default value when no input is provided.
* @html_form="id"@<br />The HTML @id@ of the @<form>@ tag to which the @<textarea>@ is attached. Associated with the contained form by default.
* @label="text"@<br />Text label displayed to the user. Default is @Message@.
* @max="integer"@<br />Maximum input value length in characters, using the HTML5 @maxlength@ attribute. Default is @10000@. To remove @maxlength@ attribute from the element entirely (not recommended), use @max=""@.
* @min="integer"@<br />Minimum input value length in characters, using the HTML5 @minlength@ attribute. Default is unset, i.e., no minimum limit.
* @name="value"@<br />Field name, as used in the HTML @<input>@ tag.
* @placeholder="text"@<br />Text to show as a guide to users, when the  @<textarea>@ is empty.
* @required="boolean"@<br />Whether this field must be filled out. Available values: @1@ (yes) or @0@ (no). Default is whatever is set in the @<txp:zem_contact>@ tag's @required@ attribute - if neither attribute is set then default is @1@.
* @rows="integer"@<br/>Number of rows, in characters, of the @<textarea>@. Default is @8@.
* @wrap="value"@<br/>Governs word-wrap. Available values: @hard@ or @soft@. If this attribute is not specified, @soft@ is its default value.

h4. Examples

h5. Example 1

Create a text area that is 40 characters wide, 10 lines high, with a customised label:

bc. <txp:zem_contact_textarea cols="40" rows="10" label="Your question" />

h3. zem_contact_submit

bc. <txp:zem_contact_submit />

Creates a submit button. May be used as a single (self-closing) or container tag. When used as a container tag, a @<button>@ element will be used instead of an @<input>@ element.

h4. Attributes:

* @class="space-separated values"@<br /> Set the CSS @class@ name of the tag. Default: @zemSubmit@. To remove @class@ attribute from the element entirely, use @class=""@.
* @html_form="id"@<br />The HTML @id@ of the @<form>@ tag to which the button is attached. Associated with the contained form by default.
* @label="text"@<br />Text shown on the submit button. Default is @Send@.

h4. Examples

h5. Example 1

Standard submit button:

bc. <txp:zem_contact_submit />

h5. Example 2

Submit button with your own text:

bc. <txp:zem_contact_submit label="To the moooon" />

h5. Example 3

Usage as a container tag, which allows you to use Textpattern tags and HTML markup in the submit button:

bc. <txp:zem_contact_submit><strong>Send</strong> question</txp:zem_contact_submit>

h5. Example 4

As example 3 above, but using an image as the button:

bc. <txp:zem_contact_submit>
    <img src="path/to/img.png" alt="submit">
</txp:zem_contact_submit>

h3. zem_contact_select

bc. <txp:zem_contact_select />

Container tag that creates a drop-down selection @<select>@ list.

h4. Attributes

* @break="tag"@<br />Break tag between the label and @<input>@ field. Default is @<br />@. Use @break=""@ to put the label and input field on the same line.
* @class="space-separated values"@<br /> Set the CSS @class@ name of the list. Default: @zemSelect@. To remove @class@ attribute from the element entirely, use @class=""@.
* @delimiter="character"@<br />Separator character between list items if using the @options@ attribute. Default is @,@ (comma). Ignored if this tag is used as a container.
* @label="text"@<br />Text label displayed to the user. Default is @Option@.
* @html_form="id"@<br />The HTML @id@ of the @<form>@ tag to which the @<textarea>@ is attached. Associated with the contained form by default.
* @name="value"@<br />Field name, as used in the HTML @<input>@ tag.
* @options="comma-separated values"@<br /> List of items (previously @list@) to show in the select box. May also use the @<txp:zem_contact_option />@ tag inside this tag's container.
* @required="boolean"@<br />Whether this field must be filled out. Available values: @1@ (yes) or @0@ (no). Default is whatever is set in the @<txp:zem_contact>@ tag's @required@ attribute - if neither attribute is set then default is @1@.
* @selected="value"@<br />List item that is selected by default.
* @size="value"@<br/>The vertical size, in entries, of the @<input>@ field.

h4. Examples

h5. Example 1

Drop-down selection list labeled 'Department', containing three options and a blank option (due to the comma before 'Marketing') shown by default, forcing the user to make a selection.

bc. <txp:zem_contact_select label="Department" options=",Marketing,Sales,Support" />

h5. Example 2

bc. <txp:zem_contact_select label="Department" selected="Sales">
    <txp:zem_contact_option />
    <txp:zem_contact_option label="Marketing" />
    <txp:zem_contact_option label="Sales" />
    <txp:zem_contact_option label="Support" />
</txp:zem_contact_select>

Drop-down selection list containing three options plus a blank option (also see @zem_contact_option@ tag below), with 'Sales' selected by default.

h3. zem_contact_option

bc. <txp:zem_contact_option />

Creates a drop-down selection option. May be used as a single (self-closing) or container tag. Also see @zem_contact_select@ tag above.

h4. Attributes

* @class="space-separated values"@<br /> Set the CSS @class@ name of the option. Default: @zemOption@. To remove @class@ attribute from the element entirely, use @class=""@.
* @label="text"@<br />Text label of this option displayed to the user.
* @selected="boolean"@<br />Whether this item is selected, May also be specified in the container tag's @selected@ attribute. Available values: @1@ (yes) or @0@ (no).
* @value="text"@<br />The value associated with this option when submitted. Default is the label.

h5. Example 1

bc. <txp:zem_contact_select label="Department">
    <txp:zem_contact_option label="Marketing" />
    <txp:zem_contact_option label="Sales" />
    <txp:zem_contact_option label="Support" />
</txp:zem_contact_select>

Drop-down selection list containing three options as single tags.

h5. Example 2

bc. <txp:zem_contact_select label="Department">
    <txp:zem_contact_option value="contact-marketing">Marketing</txp:zem_contact_option>
    <txp:zem_contact_option value="contact-sales" selected="1">Sales</txp:zem_contact_option>
    <txp:zem_contact_option value="contact-support">Support</txp:zem_contact_option>
</txp:zem_contact_select>

Drop-down selection list containing three options as container tags with 'Sales' selected by default.

h3. zem_contact_checkbox

bc. <txp:zem_contact_checkbox />

Creates a check box.

h4. Attributes

* @break="tag"@<br />Break tag between the label and input field. Default is @<br />@. Use @break=""@ to put the label and input field on the same line.
* @checked="boolean"@<br />Whether this box is checked when first displayed. Available values: @1@ (yes) or @0@ (no). Default is @0@.
* @class="space-separated values"@<br /> Set the CSS @class@ name of the option. Default: @zemCheckbox@. To remove @class@ attribute from the element entirely, use @class=""@.
* @html_form="id"@<br />The HTML @id@ of the @<form>@ tag to which the checkbox is attached. Associated with the contained form by default.
* @label="text"@<br />Text label displayed to the user. Default is @Checkbox@.
* @name="value"@<br />Field name, as used in the HTML @<input>@ tag.
* @required="boolean"@<br />Whether this checkbox must be filled out. Available values: @1@ (yes) or @0@ (no). Default is whatever is set in the @<txp:zem_contact>@ tag's @required@ attribute - if neither attribute is set then default is @1@.

h4. Examples

h5. Example 1

Shrink-wrap agreement which must be checked by the user before the email will be sent.

bc. <txp:zem_contact_checkbox label="I accept the terms and conditions" />

h5. Example 2

Optional checkboxes:

bc. With which operating systems are you familiar?<br />
<txp:zem_contact_checkbox label="Windows" required="0" /><br />
<txp:zem_contact_checkbox label="Unix/Linux/BSD" required="0" /><br />
<txp:zem_contact_checkbox label="MacOS" required="0" />

h3. zem_contact_radio

bc. <txp:zem_contact_radio />

Creates a radio button.

h4. Attributes

* @break="tag"@<br />Break tag between the label and field. Default is a space.
* @checked="boolean"@<br />Whether this radio option is checked when the form is first displayed. Available values: @1@ (yes) or @0@ (no). Default is @0@.
* @class="space-separated values"@<br /> Set the CSS @class@ name of the radio button. Default: @zemRadio@. To remove @class@ attribute from the element entirely, use @class=""@.
* @group="text"@ *(required)*<br />Text used in the email to describe this group of radio buttons. This attribute value is remembered for subsequent radio buttons, so you only have to set it on the first radio button of a group. Default is @Radio@.
* @html_form="id"@<br />The HTML @id@ of the @<form>@ tag to which the checkbox is attached. Associated with the contained form by default.
* @label="text"@ *(required)*<br />Text label displayed to the user as radio button option.
* @name="value"@<br />Field name, as used in the HTML @<input>@ tag. This attribute value is remembered for subsequent radio buttons, so you only have to set it on the first radio button of a group. If it hasn't been set at all, it will be derived from the @group@ attribute.
* @required="boolean"@<br />Whether this radio set must be filled out. Available values: @1@ (yes) or @0@ (no). Default is whatever is set in the @<txp:zem_contact>@ tag's @required@ attribute - if neither attribute is set then default is @1@. You may set it on only the first option, or set the same value on all of them in the group.

h4. Examples

h5. Example 1

Group mutually exclusive radio buttons by setting the @group@ attribute on the first radio button in a group. Only the chosen radio button from each group will be used in the email message. The message will be output in the form @group: label@ for each of the chosen radio buttons.

bc. <txp:zem_contact_radio label="Medium" group="I like my steak" />
<txp:zem_contact_radio label="Rare" />
<txp:zem_contact_radio label="Well done" />
<txp:zem_contact_radio label="Wine" group="With a glass of" />
<txp:zem_contact_radio label="Beer" />
<txp:zem_contact_radio label="Water" />

h3. zem_contact_secret

bc. <txp:zem_contact_secret />

This tag has no effect on the form or HTML output, but will include additional information in the email. It can be used as a single (self-closing) tag or as a container tag.

h4. Attributes

* @label="text"@<br />Used to identify the field in the email. Default is @Secret@.
* @name="text"@<br />Used internally. Set this only if you have multiple 'secret' form elements with identical labels.
* @value="value"@<br />Some text you want to add to the email.

h4. Examples

h5. Example 1

Usage as a single (self-closing) tag:

bc. <txp:zem_contact_secret value="The answer is 42" />

h5. Example 2

Usage as a container tag:

bc. <txp:zem_contact_secret label="Dear user">
    Please provide a useful example for this tag!
</txp:zem_contact_secret>

h3. zem_contact_serverinfo

bc. <txp:zem_contact_serverinfo />

This tag has no effect on the form or HTML output, but will include additional information in the email based on the PHP @$_SERVER@ variable.

h4. Attributes

* @label="text"@<br />Used to identify the field in the email. Defaults to the value of the @name@ attribute.
* @name="value"@ *(required)*<br />Name of the server variable. See the "PHP manual":http://php.net/manual/reserved.variables.php#reserved.variables.server for a full list.

h4. Examples

h5. Example 1

Add the IP address of the visitor to the email:

bc. <txp:zem_contact_serverinfo name="REMOTE_ADDR" label="IP number" />

h5. Example 2

Add the name of the visitor's browser to the email:

bc. <txp:zem_contact_serverinfo name="HTTP_USER_AGENT" label="Browser" />

h3. zem_contact_send_article

bc. <txp:zem_contact_send_article />

Use this tag in your individual article form, where you want the "send article" link to be displayed.

h4. Attributes

* @linktext="text"@<br />Text displayed for the link. Default is @send article@.

h4. Examples

h5. Example 1

On an article form:

bc. <txp:zem_contact_send_article linktext="Send this article" />

h3. zem_contact_label

bc. <txp:zem_contact_label />

Return the label for the given attribute name.

h4. Attributes

* @name="text"@<br />The name of the field for which you wish to retrieve the label.

h3. zem_contact_value

bc. <txp:zem_contact_value />

Return the value of the given attribute, by name or its label.

h4. Attributes

* @label="text"@<br />The label of the field for which you wish to retrieve the value.
* @name="text"@<br />The name of the field for which you wish to retrieve the value.

h3. zem_contact_if

bc. <txp:zem_contact_if />

Conditional tag for checking variable conditions, either by name or label.

h4. Attributes

* @label="text"@<br />The label of the field you wish to check.
* @name="text"@<br />The name of the field you wish to check.
* @value="text"@<br />The value against which to test the given field. Leave blank to just test if there is any value assigned to the field.

h4. Examples

h5. Example 1

Take action if the visitor has entered a particular value.

bc. <txp:zem_contact_if name="delivery" value="courier">

Please note, this option incurs an additional charge, @</txp:zem_contact_if>@.

h2. Advanced examples

h3. Separate input and error forms

Using @show_input@ and @show_error@ to display the form and error messages on different parts of a page. A form is used to make sure the contents of both forms are identical, otherwise they would be seen as two independent forms. The first form only shows errors (no input), the second form only shows the input fields (no errors).

bc. <div id="error">
    <txp:zem_contact form="contact_form" show_input="0" />
</div>
<div id="inputform">
    <txp:zem_contact form="contact_form" show_error="0" />
</div>

Apart from the @show_error@ and @show_input@ attributes, all other attributes must be 100% identical in both forms, otherwise they would be seen as two unrelated forms.

h3. User selectable subject field

Specify the @subject_form@ attribute and create a form which includes a @zem_contact_select@ tag:

bc. <txp:zem_contact to="you@example.com" subject_form="my_subject_form" />
    <txp:zem_contact_text label="Name" /><br />
    <txp:zem_contact_email /><br />
    <txp:zem_contact_select label="Choose Subject" options=",Question,Feedback" /><br />
    <txp:zem_contact_textarea label="Message" /><br />
</txp:zem_contact>

Create a Textpattern form called "my_subject_form", containing:

bc. <txp:php>
    global $zem_contact_form;
    echo $zem_contact_form['Choose Subject'];
</txp:php>

The @label@ used in the @zem_contact_select@ tag must be identical to the corresponding variable in the @subject_form@. Here we used @Choose subject@.

If you'd prefer to add a common prefix for all subjects, use a @subject_form@ containing:

bc. <txp:php>
    global $zem_contact_form;
    echo 'My common prefix - ' . $zem_contact_form['Choose Subject'];
</txp:php>

h3. User selectable recipient, without showing email address

Specify the @to_form@ attribute and create a form which includes a @zem_contact_select@ tag:

bc. <txp:zem_contact to_form="my_zem_contact_to_form">
    <txp:zem_contact_text label="Name" /><br />
    <txp:zem_contact_email /><br />
    <txp:zem_contact_select label="Department" options=",Support,Sales" /><br />
    <txp:zem_contact_textarea label="Message" /><br />
</txp:zem_contact>

Create a Textpattern form called "my_zem_contact_to_form", containing:

bc. <txp:php>
    global $zem_contact_form;
    switch($zem_contact_form['Department'])
    {
        case 'Support':
            echo 'crew@example.com';
            break;
        case 'Sales':
            echo 'showmethemoney@example.com';
            break;
        default:
            echo 'someone@example.com';
    }
</txp:php>

The @label@ used in the @zem_contact_select@ tag must be identical to the corresponsing variable in the @to_form@. Here we used @Department@.

A 'default' email address in the @to_form@ is specified to ensure that a valid email address is used in cases where you add or change a select/radio option and forget to update the @to_form@.

*Warning:* Never use tags like @zem_contact_text@, @zem_contact_email@ or @zem_contact_textarea@ for setting the recipient address, otherwise your form can be abused to send spam to any email address!

h2. Styling

The form itself has a @class@ of @zemContactForm@ set on the @form@ HTML tag.

The list of error messages (if any) has a @class@ of @zemError@ set on the @ul@ HTML tag that encloses the list of errors.

All form elements and corresponding labels have the following classes (or ids set):

# One of @zemText@, @zemEmail@, @zemTextarea@, @zemSelect@, @zemOption@, @zemRadio@, @zemCheckbox@ or @zemSubmit@. By default, it should be obvious which @class@ is used for which form element (and corresponding label). You can override these names by using your own @class@ attribute.
# @zemRequired@, @errorElement@ or @zemRequirederrorElement@, depending on whether the form element is required, an error was found in whatever the visitor entered... or both.
# An individual @id@ or @class@ set to the value of the @name@ attribute of the corresponding tag. When styling forms based on this @class@, you should explicitly set the @name@ attribute because automatically generated names may change in newer zem_contact_reborn versions.

h2. Plugin API and callback events

The plugin API of zem_contact_reborn, originally developed by Tranquillo, allows other plugins to interact with contact forms. This permits extra functionality such as "Combatting Comment Spam":http://textpattern.net/wiki/index.php?title=Combat_Comment_Spam, HTML email, newsletter delivery and so forth to be bolted onto the base plugin.

Three callback events exist in zem_contact_reborn:

* @zemcontact.submit@ is called after the form is submitted and the values are checked if empty or valid email addresses, but before the mail is sent.
* @zemcontact.form@ lets you insert content in the contact form as displayed to the visitor.
* @zemcontact.deliver@ is called immediately prior to delivery and advertises the intended payload so you may manipulate it. For example, you could do something as simple as adding CC: or BCC: fields. Or change the MIME type header to @text/html@ and add some HTML content based on the given body data, then let zem_contact_reborn handle the mailing. Or you could intercept the entire mail process, handle mailing yourself with a third party system, and tell zem_contact_reborn to skip its internal mailing process.

For reference here are the commands that will be interesting to plugin developers:

bc.. // This will call your function before the form is submitted so you can analyse the submitted data
register_callback('abc_myfunction', 'zemcontact.submit');

// This will call your function and add the output (use @return $mystuff;@) to the contact-form.
register_callback('abc_myotherfunction2', 'zemcontact.form');

// To get hold of the form-variables you can use global zem_contact_form;
// With the following two lines you can tell zem_contact if your plugin found spam.
$evaluator =& get_zemcontact_evaluator();

// The passed value must be non-zero to mark the content as spam.
// Value must be a number between 0 and 1.
$evaluator -> add_zemcontact_status(1);

p. Multiple plugins can be active at the same time and each of them can mark the submitted content as spam and prevent the form from being submitted.

h4. Examples

bc.. register_callback('pap_zemcontact_form','zemcontact.form');
register_callback('pap_zemcontact_submit','zemcontact.submit');

function pap_zemcontact_form()
{
    $field = '<div style="display:none">'.
        finput('text','phone',ps('phone'),'','','','','','phone').'<br />'.
        finput('text','mail',ps('mail'),'','','','','','mail').'</div>';
    return $field;</code>
}

function pap_zemcontact_submit()
{
    $checking_mail_field = trim(ps('mail'));
    $checking_phone_field = trim(ps('phone'));
    $evaluation =& get_zemcontact_evaluator();

    // If the hidden fields are filled out, the contact form won't be submitted!
    if ($checking_mail_field != '' or $checking_phone_field != '') {
        $evaluation -> add_zemcontact_status(1);
    }

    return;
}

p. For the delivery callback, you signal back to the plugin your intentions so that Zem Contact Reborn knows what to do after your delivery plugin has executed. Return the following strings:

* @zemcontact.send@ (or no return value) to allow Zem Contact Reborn to continue mailing the content.
* @zemcontact.skip@ to skip zem_contact's mailing (i.e., the third party handles the mail process) and return 'success' to the visitor.
* @zemcontact.fail@ to skip zem_contact's mailing and return 'fail' to the visitor.

Or simply @exit@ your plugin to halt the entire operation so no Zem Contact Reborn feedback is given.

h2. Frequently asked questions

h5. How do I remove the legend and fieldset surrounding the contact form?

Set the @label@ attribute to an empty value (@label=""@) in the @zem_contact@ tag.

h5. No email is sent. How do I diagnose and fix the problem?

First try a simple contact form, using only the @zem_contact@ tag with the @to@ attribute set to a valid email address. If that doesn't send email, fill out the 'SMTP envelope sender address' field in Textpattern's Admin → Preferences panel on the admin tab. If that doesn't help either, take a look at your mail server log files to see what the problem is.

h5. Which tag do I use to create the submit button?

Just use normal HTML code to create a submit button. For historical reasons this plugin still provides the @zem_contact_submit@ tag, but it provides little extra functionality.

h5. How can I get a unique (order) number in the subject of each email?

Try using the "rvm_counter":http://vanmelick.com/txp tag in the @subject@ attribute of the @zem_contact@ tag.

h5. I want to use the contact form in an article list (one form for each article), but how do I make each form unique?

You can make each form unique by making one of its attribute values unique. See previous question for an example of how to do this with the @subject@ attribute.

h5. Send article: can I let people specify multiple recipients?

No. The 'send article' functionality is spammy enough as it is right now.

h5. Send article: can I show the contact form without having to click a link first?

Sure, put this just above the @zem_contact@ tag:

bc. <txp:php>$_GET['zem_contact_send_article']='yes';</txp:php>

h5. How can I use this form to upload files?

You can't, but have a look at the "sed_afu":http://txp-plugins.netcarving.com/ (anonymous file upload) and "mem_form":https://bitbucket.org/Manfre/txp-plugins/downloads/ plugins.

h5. Can I use this plugin to send HTML email?

Not without a plugin like "mem_form":https://bitbucket.org/Manfre/txp-plugins/downloads or using the delivery callback.

h5. Can I use this plugin to send newsletters?

Not without a plugin, such as "mem_postmaster":https://bitbucket.org/Manfre/txp-plugins/downloads/.

h5. I have a question that's not listed here

First read the plugin documentation (the page you're on right now) once more. If that doesn't answer your question, visit the "Textpattern forum":http://forum.textpattern.com.

h2. History

Please see the "changelog on GitHub":https://github.com/Bloke/zem_contact_reborn/blob/master/CHANGELOG.textile.

h2. Authors/credits

* *zem* wrote the zem_contact 0.6 plugin on which this plugin was initially based.
* *Mary* completely revised the plugin code.
* *Stuart* turned it into a plugin, added a revised help text and additional code. Maintained all plugin versions until 4.0.3.17.
* *wet* added the @zem_contact_radio@ tag.
* *Tranquillo* added the anti-spam API and @zem_contact_send_article@ functionality.
* *aslsw66*, *jdykast* and others provided additional code.
* *Ruud* cleaned up and audited the code to weed out bugs and completely revised the help text. Maintained all versions until 4.0.3.20.
* *Bloke* is the maintainer of v4.5.0.0 and up. Many thanks to "all additional contributors":https://github.com/Bloke/zem_contact_reborn/graphs/contributors.
* Supported and tested to destruction by the Textpattern community.
